# coding: utf-8

"""
    Python APIs for oaCORE

    Python APIs for oaCORE

    OpenAPI spec version: 2.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ArticlesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def articles_get_core_id_get(self, core_id, **kwargs):
        """
        Get articles by ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.articles_get_core_id_get(core_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str core_id: The id of the article (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.articles_api_call("GET", {"core_id": core_id}, **kwargs)
        else:
            (data) = self.articles_api_call("GET", {"core_id": core_id}, **kwargs)
            return data

    def articles_get_core_id_post(self, core_id, **kwargs):
        """
        Get articles by ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.articles_get_core_id_get(core_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str core_id: The id of the article (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.articles_api_call("POST", {"core_id": core_id}, **kwargs)
        else:
            (data) = self.articles_api_call("POST", {"core_id": core_id}, **kwargs)
            return data

    def articles_api_call(self, method, params, **kwargs):
        """
        Articles api call

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.articles_get_core_id_get_with_http_info(core_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str method: The id of the article (required)
        :param str params: The id of the article (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['core_id', 'callback', '_return_http_data_only', '_preload_content', '_request_timeout']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                        "Got an unexpected keyword argument '%s'"
                        " to method articles_get_core_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        params["core_id"] = params['params']["core_id"]
        print(params["params"])
        # verify the required parameter 'core_id' is set
        if ('core_id' not in params) or (params['core_id'] is None):
            raise ValueError("Missing the required parameter `core_id` when calling `articles_get_core_id_get`")

        collection_formats = {}

        resource_path = '/articles/get/{coreId}'.replace('{format}', 'json')
        path_params = {}
        if 'core_id' in params:
            path_params['coreId'] = params['core_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyQueryParam']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def articles_search_api_call(self, **kwargs):
        """
        Articles search api call

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.articles_get_core_id_get_with_http_info(core_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str method: The id of the article (required)
        :param str params: The id of the article (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        all_params = ['query', 'page', 'pageSize', 'fulltext', 'callback', '_return_http_data_only', '_preload_content',
                      '_request_timeout']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                        "Got an unexpected keyword argument '%s'"
                        " to method articles_get_core_id_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'core_id' is set
        if ('query' not in params) or (params['query'] is None):
            raise ValueError("Missing the required parameter `q` when calling `articles_get_core_id_get`")

        collection_formats = {}

        resource_path = '/articles/search/{query}'.replace("{query}", params['query'])
        del params["query"]
        path_params = {}

        query_params = {"page": params["page"], "pageSize": params["pageSize"], "fulltext": params["fulltext"]}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyQueryParam']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
